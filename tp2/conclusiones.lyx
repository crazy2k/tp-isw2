#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection*
UP vs Ágil
\end_layout

\begin_layout Standard
A lo largo de este cuatrimestre, pudimos trabajar con ambas metodologías
 de desarrollo.
 
\end_layout

\begin_layout Standard
Cada integrante del equipo tuvo distintas experiencias laborales.
 Algunos usaban alguna metodología con el agregado de algunos cambios para
 adaptarlas a sus necesidades y otros solo usaban una lista de tareas a
 realizar intentando tener una mínima organización de lo que se esperaba
 terminar luego de cierto tiempo de desarrollo.
 Con esa experiencia y con la experiencia ganada durante la cursada, queda
 bien claro que es importante usar alguna de estas metodologías cuando se
 cuenta con un proyecto de equipo que requiere más de pocas semanas de desarroll
o.
 
\end_layout

\begin_layout Standard
Encontramos ventajas y desventajas en cada metodología de desarrollo de
 software, pero pudimos encontrar gran ayuda en el uso de alguna metodología
 a la hora de empezar a desarrollar, por lo que promovemos el uso de alguna
 de estas metodologías.
 
\end_layout

\begin_layout Subsubsection*
Ventajas y desventajas que notamos en UP
\end_layout

\begin_layout Enumerate
Es fácil pensar que la documentación es algo superfluo en la que se pierde
 mucho tiempo en documentos para que nadie los lea.
 Ambas metodologías tienen mucha documentación, pero sobretodo UP.
 
\end_layout

\begin_layout Enumerate
En el caso de UP, hay que capacitar a los stakeholders para que entiendan
 cómo es el proceso y por qué es tan importante el trabajo previo a empezar
 a desarrollar.
 
\end_layout

\begin_layout Enumerate
Una ventaja de UP es que se muestra a los stakeholders un panorama completo
 de lo que se va a desarrollar, haciendo que intervengan en las decisiones
 para el desarrollo del proyecto (QAW, por ejemplo) y mostrandoles de distintas
 maneras cómo sus pedidos son tenidos en cuenta.
 Sin embargo, hay que tener en mente que el proceso debe agregar valor a
 los stakeholders del proyecto, sin terminar usando de más la metodología.
\end_layout

\begin_layout Enumerate
Utilizamos UP cuando el proyecto a desarrollar es grande, aunque esto puede
 terminar en la necesidad de tener un experto en UP para poder seguir bien
 la metodología y asegurar que el proceso esté definido y usado correctamente.
\end_layout

\begin_layout Enumerate
En particular, en este trabajo, notamos que el proceso previo a desarrollar
 es mucho más largo que para Ágil.
 
\end_layout

\begin_layout Enumerate
Intuitivamente, pareciera que UP se centra en pensar y analizar mucho más
 a futuro el software a desarrollar, teniendo en cuenta cada detalle del
 proyecto, como ser riesgos, atributos pedidos por cada stakeholder, tácticas
 de cómo cubrir esos pedidos, etc.
 Además, notamos que uno tiene que conocer y analizar mejor el dominio del
 problema en etapas previas al desarrollo del sistema.
 Esta característica puede tener aspectos muy buenos, pero puede no funcionar
 con ciertos proyectos que cambian muy seguido durante su desarrollo.
 
\end_layout

\begin_layout Enumerate
Se establece una base sólida de arquitectura, se la prueba y se la documenta.
 UP se centra en la arquitectura.
\end_layout

\begin_layout Subsubsection*
Ventajas y desventajas que notamos en Ágil
\end_layout

\begin_layout Enumerate
Los stakeholders y grupo de desarrollo tienen mucha interacción, comunicación
 y colaboración durante todo el proceso de desarrollo.
 
\end_layout

\begin_layout Enumerate
Al final de cada iteración tenemos un software andando con no mucho esfuerzo
 y listo para mostrárselo a los stakeholders, como nos pasó en este trabajo.
\end_layout

\begin_layout Enumerate
Utilizamos Ágil cuando el proyecto a desarrollar es chico o mediano.
 Una vez que el proyecto se hace más grande o los integrantes se separan
 geográficamente, la metodología comienza a fallar.
\end_layout

\begin_layout Enumerate
Es una metodología muy sensilla, fácil de aprender y de aplicar.
\end_layout

\begin_layout Enumerate
En este trabajo, notamos que durante cada iteración de Ágil, cada uno puede
 concentrarse en terminar una parte atómica y pequeña según se le haya asignado,
 sin tener en cuenta el entregable final, que al pasar las iteraciones podría
 mutar en algo totalmente distinto a lo que se esperaba durante las primeras
 iteraciones.
\end_layout

\begin_layout Enumerate
Ágil impulsa el trabajo en equipo.
\end_layout

\begin_layout Enumerate
La arquitectura se va definiendo y mejorando mientras avanza el proyecto.
\end_layout

\begin_layout Subsection*

\emph on
Programming in the small
\emph default
 vs 
\emph on
programming in the large
\end_layout

\begin_layout Standard
Según vimos en la materia, la arquitectura de software de un sistema de
 computación es la estructura o estructuras del sistema, que abarcan elementos
 de software, las propiedades externamente visibles de estos elementos y
 las relaciones entre ellos.
 
\end_layout

\begin_layout Standard
La arquitectura de un sistema de software es el conjunto de “decisiones
 principales de diseño”.
\end_layout

\begin_layout Standard
La arquitectura es una parte del diseño.
\end_layout

\begin_layout Standard
Diseño: “Formar un plan o esquema en la mente, para ejecución posterior”.
 
\end_layout

\begin_layout Standard
Hay decisiones de diseño “no arquitectónicas”.
 Y además, lo que no es arquitectónico ahora, puede ser lo más tarde (depende
 de la visibilidad de los módulos).
\end_layout

\begin_layout Subsection*
Conclusiones
\end_layout

\begin_layout Standard
Luego de haber trabajado con Ágil y con UP, notamos que cada uno de estas
 metodologías tienen sus características buenas como sus características
 malas, pero una no es mejor que la otra a priori.
 No existe una metodología universal que resulte exitosa para cualquier
 proyecto de software sino que debe de ser adaptada a las características
 del mismo.
\end_layout

\begin_layout Standard
La idea que nos queda es que, antes de empezar un proyecto, hay que analizarlo
 y decidir qué metodología vamos a usar, según esas características, como
 ser recursos técnicos, recursos humanos, tiempo de desarrollo, tipo de
 sistema, etc.
\end_layout

\end_body
\end_document
